// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`App 1`] = `
<View
  style={
    Object {
      "flex": 1,
    }
  }
>
  <View>
    <View
      style={
        Object {
          "alignContent": "space-around",
          "alignItems": "center",
          "backgroundColor": "#005aa5",
          "padding": 15,
        }
      }
    >
      <Text
        style={
          Object {
            "color": "#ffffff",
            "fontSize": 20,
            "fontWeight": "bold",
            "textAlignVertical": "top",
          }
        }
      >
        RESGATE
      </Text>
    </View>
    <View
      style={
        Object {
          "backgroundColor": "#fae128",
          "padding": 3,
        }
      }
    />
  </View>
  <View
    style={
      Object {
        "flex": 1,
      }
    }
  >
    <RNCSafeAreaProvider
      onInsetsChange={[Function]}
      style={
        Array [
          Object {
            "flex": 1,
          },
          undefined,
        ]
      }
    >
      <View
        onLayout={[Function]}
        style={
          Object {
            "flex": 1,
          }
        }
      >
        <View
          pointerEvents="box-none"
          style={
            Object {
              "bottom": 0,
              "left": 0,
              "position": "absolute",
              "right": 0,
              "top": 0,
            }
          }
        >
          <View
            collapsable={false}
            style={
              Object {
                "opacity": 1,
              }
            }
          />
          <View
            accessibilityElementsHidden={false}
            closing={false}
            gestureVelocityImpact={0.3}
            importantForAccessibility="auto"
            onClose={[Function]}
            onGestureBegin={[Function]}
            onGestureCanceled={[Function]}
            onGestureEnd={[Function]}
            onOpen={[Function]}
            onTransitionStart={[Function]}
            pointerEvents="box-none"
            style={
              Object {
                "bottom": 0,
                "left": 0,
                "position": "absolute",
                "right": 0,
                "top": 0,
              }
            }
            transitionSpec={
              Object {
                "close": Object {
                  "animation": "spring",
                  "config": Object {
                    "damping": 500,
                    "mass": 3,
                    "overshootClamping": true,
                    "restDisplacementThreshold": 10,
                    "restSpeedThreshold": 10,
                    "stiffness": 1000,
                  },
                },
                "open": Object {
                  "animation": "spring",
                  "config": Object {
                    "damping": 500,
                    "mass": 3,
                    "overshootClamping": true,
                    "restDisplacementThreshold": 10,
                    "restSpeedThreshold": 10,
                    "stiffness": 1000,
                  },
                },
              }
            }
          >
            <View
              needsOffscreenAlphaCompositing={false}
              pointerEvents="box-none"
              style={
                Object {
                  "flex": 1,
                  "marginTop": 0,
                }
              }
            >
              <View
                collapsable={false}
                forwardedRef={[Function]}
                onGestureHandlerEvent={[Function]}
                onGestureHandlerStateChange={[Function]}
                style={
                  Object {
                    "flex": 1,
                    "transform": Array [
                      Object {
                        "translateX": 0,
                      },
                      Object {
                        "translateX": 0,
                      },
                    ],
                  }
                }
              >
                <View
                  pointerEvents="none"
                  style={
                    Object {
                      "backgroundColor": "#fdfdfd",
                      "bottom": 0,
                      "left": 0,
                      "position": "absolute",
                      "shadowColor": "#000",
                      "shadowOffset": Object {
                        "height": 1,
                        "width": -1,
                      },
                      "shadowOpacity": 0.3,
                      "shadowRadius": 5,
                      "top": 0,
                      "width": 3,
                    }
                  }
                />
                <View
                  style={
                    Array [
                      Object {
                        "flex": 1,
                        "overflow": "hidden",
                      },
                      Array [
                        Object {
                          "backgroundColor": "rgb(242, 242, 242)",
                        },
                        Object {
                          "backgroundColor": "#fdfdfd",
                        },
                      ],
                    ]
                  }
                >
                  <View
                    style={
                      Object {
                        "flex": 1,
                        "flexDirection": "column-reverse",
                      }
                    }
                  >
                    <View
                      style={
                        Object {
                          "flex": 1,
                        }
                      }
                    >
                      <RCTSafeAreaView
                        emulateUnlessSupported={true}
                        style={
                          Object {
                            "flex": 1,
                          }
                        }
                      >
                        <View
                          style={
                            Object {
                              "backgroundColor": "#f4f4f4",
                              "padding": 15,
                            }
                          }
                        >
                          <View
                            style={
                              Object {
                                "marginLeft": 20,
                              }
                            }
                          >
                            <Text>
                              INVESTIMENTO
                            </Text>
                            <Text
                              style={
                                Object {
                                  "marginLeft": 210,
                                  "marginTop": -19,
                                }
                              }
                            >
                              R$
                            </Text>
                          </View>
                        </View>
                        <View>
                          <RCTScrollView
                            data={Array []}
                            disableVirtualization={false}
                            getItem={[Function]}
                            getItemCount={[Function]}
                            horizontal={false}
                            initialNumToRender={10}
                            keyExtractor={[Function]}
                            maxToRenderPerBatch={10}
                            onContentSizeChange={[Function]}
                            onEndReachedThreshold={2}
                            onLayout={[Function]}
                            onMomentumScrollEnd={[Function]}
                            onScroll={[Function]}
                            onScrollBeginDrag={[Function]}
                            onScrollEndDrag={[Function]}
                            removeClippedSubviews={false}
                            renderItem={[Function]}
                            scrollEventThrottle={50}
                            stickyHeaderIndices={Array []}
                            updateCellsBatchingPeriod={50}
                            viewabilityConfigCallbackPairs={Array []}
                            windowSize={21}
                          >
                            <View />
                          </RCTScrollView>
                        </View>
                      </RCTSafeAreaView>
                    </View>
                  </View>
                </View>
              </View>
            </View>
          </View>
        </View>
      </View>
      <View
        pointerEvents="box-none"
        style={
          Object {
            "height": 64,
            "left": 0,
            "position": "absolute",
            "right": 0,
            "top": 0,
            "zIndex": 1,
          }
        }
      />
    </RNCSafeAreaProvider>
  </View>
</View>
`;
